import os
import sqlite3
from datetime import datetime, time
import pytz
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    JobQueue,
)
import logging
from telegram.error import Forbidden


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏–∑ .env
load_dotenv()


class Config:
    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    DB_NAME = os.getenv("DB_NAME", "pushups.db")
    ADMIN_USER_ID = os.getenv("ADMIN_USER_ID")
    GOAL = int(os.getenv("GOAL", 100))
    GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID"))


if not Config.TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TIMEZONE = pytz.timezone('Europe/Moscow')  # –ñ–µ—Å—Ç–∫–æ –∑–∞–¥–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è


# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
def init_db():
    with sqlite3.connect(Config.DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS pushups (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                date TEXT,
                count INTEGER,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        conn.commit()


def add_user(user_id: int, username: str, first_name: str, last_name: str):
    with sqlite3.connect(Config.DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute(
            "INSERT OR IGNORE INTO users (user_id, username, first_name, last_name) VALUES (?, ?, ?, ?)",
            (user_id, username, first_name, last_name),
        )
        conn.commit()


def add_pushups(user_id: int, count: int):
    today = datetime.now().strftime("%Y-%m-%d")
    with sqlite3.connect(Config.DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO pushups (user_id, date, count) VALUES (?, ?, ?)",
            (user_id, today, count),
        )
        conn.commit()


def get_today_pushups(user_id: int) -> int:
    today = datetime.now().strftime("%Y-%m-%d")
    with sqlite3.connect(Config.DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute(
            "SELECT SUM(count) FROM pushups WHERE user_id = ? AND date = ?",
            (user_id, today),
        )
        result = cursor.fetchone()[0] or 0
    return result


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    add_user(user.id, user.username, user.first_name, user.last_name)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
        f"–Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ –æ—Ç–∂–∏–º–∞–Ω–∏–π. –¶–µ–ª—å ‚Äî {Config.GOAL} –≤ –¥–µ–Ω—å.\n"
        f"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´25¬ª –∏–ª–∏ ¬´—Å–¥–µ–ª–∞–ª 30¬ª.\n\n"
        f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: `{update.message.chat.id}`",
        parse_mode="Markdown"
    )


async def add_pushups_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∂–∏–º–∞–Ω–∏–π"""

    user = update.effective_user
    add_user(user.id, user.username, user.first_name, user.last_name)
    user_id = user.id
    user_name = user.username


    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —É –∫–æ–º–∞–Ω–¥—ã
    if not context.args:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /add <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /add 25"
        )
        return

    message = ''
    try:
        # –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π
        count = int(context.args[0])
        if count <= 0:
            message = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.\n–ü—Ä–∏–º–µ—Ä: /add 25"
            raise ValueError
        if count > Config.GOAL:
            message = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ù–µ –ø–∏–∑–¥–∏.\n–ü—Ä–∏–º–µ—Ä: /add 25"
            raise ValueError
    except ValueError:
        await update.message.reply_text(message)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    today_pushups = get_today_pushups(user_id)
    total = today_pushups + count

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_pushups(user_id, count)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if total >= Config.GOAL:
        message = (
            f"üèÜ {user_name}, —Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É!\n"
            f"–í—Å–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è: {total} –∏–∑ {Config.GOAL} –æ—Ç–∂–∏–º–∞–Ω–∏–π\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ: {count}"
        )
    else:
        message = (
            f"üí™ {user_name}, —Ö–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞!\n"
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {count} –æ—Ç–∂–∏–º–∞–Ω–∏–π\n"
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {total}/{Config.GOAL}\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å: {Config.GOAL - total}"
        )

    # –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if str(update.message.chat.id) == Config.GROUP_CHAT_ID:
        await context.bot.send_message(
            chat_id=int(Config.GROUP_CHAT_ID),
            text=f"@{update.effective_user.username} –¥–æ–±–∞–≤–∏–ª {count} –æ—Ç–∂–∏–º–∞–Ω–∏–π!",
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(message)


# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
async def remind_pushups(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now(TIMEZONE)
    today = now.strftime("%Y-%m-%d")
    if 9 <= now.hour < 21:  # –¢–æ–ª—å–∫–æ —Å 9:00 –¥–æ 21:00
        try:
            with sqlite3.connect(Config.DB_NAME) as conn:
                cursor = conn.cursor()
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–≤—à–∏—Ö –Ω–æ—Ä–º—É
                cursor.execute("""
                               SELECT u.user_id,
                                      u.username,
                                      COALESCE(SUM(p.count), 0) AS total
                               FROM users u
                                        LEFT JOIN pushups p ON
                                   p.user_id = u.user_id AND
                                   p.date = ?
                               GROUP BY u.user_id
                               HAVING total < ?
                               ORDER BY total DESC
                               """, (today, Config.GOAL))

                underachievers = []
                for row in cursor.fetchall():
                    user_id, username, total = row
                    underachievers.append(f"@{username} - {total}/{Config.GOAL}")

                if underachievers:
                    message = "‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*\n–°–ª–µ–¥—É—é—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –Ω–æ—Ä–º—É:\n" + \
                              "\n".join(underachievers)

                    await context.bot.send_message(
                        chat_id=Config.GROUP_CHAT_ID,
                        text=message,
                        parse_mode="Markdown"
                    )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ remind_pushups: {e}")

# --- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç ---
async def generate_report() -> str:
    today = datetime.now().strftime("%Y-%m-%d")
    with sqlite3.connect(Config.DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("""
                       SELECT 
                           u.user_id, 
                           u.first_name, 
                           COALESCE(SUM(p.count), 0) as total
                       FROM users u
                       LEFT JOIN pushups p ON u.user_id = p.user_id AND p.date = ?
                       GROUP BY 
                           u.user_id, 
                           u.first_name
                       """, (today,))
        results = cursor.fetchall()

    achievers = []
    underachievers = []

    for user_id, first_name, total in results:
        if total >= Config.GOAL:
            achievers.append(f"{first_name} - {total} ‚úÖ")
        else:
            underachievers.append(f"{first_name} - {total} ‚ùå (–æ—Å—Ç–∞–ª–æ—Å—å {Config.GOAL - total})")

    report_message = "üìä *–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:*\n\n"

    if achievers:
        report_message += "*–ú–æ–ª–æ–¥—Ü—ã!*\n" + "\n".join(achievers) + "\n\n"

    if underachievers:
        report_message += "*–ù—É–∂–Ω–æ —Å—Ç–∞—Ä–∞—Ç—å—Å—è –±–æ–ª—å—à–µ:*\n" + "\n".join(underachievers)

    return report_message


async def report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /report"""
    user = update.effective_user
    add_user(user.id, user.username, user.first_name, user.last_name)
    report = await generate_report()
    await update.message.reply_text(report, parse_mode="Markdown")


async def send_daily_report(context: ContextTypes.DEFAULT_TYPE):
    try:
        report = await generate_report()
        if Config.GROUP_CHAT_ID:
            try:
                await context.bot.send_message(
                    chat_id=Config.GROUP_CHAT_ID,
                    text=report.replace("–¢–µ–∫—É—â–∏–π", "–ò—Ç–æ–≥–æ–≤—ã–π"),
                    parse_mode="Markdown"
                )
            except Forbidden:
                logger.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–æ–≤–æ–º—É —á–∞—Ç—É")
                if Config.ADMIN_USER_ID:
                    await context.bot.send_message(
                        chat_id=Config.GROUP_CHAT_ID,
                        text="‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–æ–≤–æ–º—É —á–∞—Ç—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞",
                        parse_mode="Markdown"
                    )
        elif Config.ADMIN_USER_ID:
            await context.bot.send_message(
                chat_id=Config.GROUP_CHAT_ID,
                text="‚ö†Ô∏è GROUP_CHAT_ID –Ω–µ —É–∫–∞–∑–∞–Ω\n\n" + report.replace("–¢–µ–∫—É—â–∏–π", "–ò—Ç–æ–≥–æ–≤—ã–π"),
                parse_mode="Markdown"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_daily_report: {e}")


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏"""
    logger.error(msg="–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", exc_info=context.error)

    if isinstance(context.error, Forbidden):
        logger.warning(f"–ë–æ—Ç—É –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    elif isinstance(context.error, Exception):
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {context.error}")


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def main():
    init_db()

    # –°–æ–∑–¥–∞–µ–º Application —Å JobQueue
    application = Application.builder().token(Config.TOKEN).job_queue(JobQueue()).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_error_handler(error_handler)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("report", report_command))
    application.add_handler(CommandHandler("add", add_pushups_command))

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ (9:00-21:00)
    application.job_queue.run_repeating(
        callback=remind_pushups,
        interval=7200,
        first=10,
    )

    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 22:00
    application.job_queue.run_daily(
        callback=send_daily_report,
        time=time(hour=22, minute=0, tzinfo=TIMEZONE),
        days=tuple(range(7)),
    )

    application.run_polling()


if __name__ == "__main__":
    main()
