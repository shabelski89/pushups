import os
import sqlite3
from datetime import datetime, time
import pytz
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    JobQueue,
)
import logging
from telegram.error import Forbidden


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏–∑ .env
load_dotenv()


class Config:
    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    DB_NAME = os.getenv("DB_NAME", "pushups.db")
    ADMIN_USER_ID = os.getenv("ADMIN_USER_ID")
    GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID"))
    GOALS = {
        'pushups': int(os.getenv("PUSHUPS_GOAL", 100)),
        'plank': int(os.getenv("PLANK_GOAL", 120))
    }


if not Config.TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TIMEZONE = pytz.timezone('Europe/Moscow')  # –ñ–µ—Å—Ç–∫–æ –∑–∞–¥–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è


# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
def init_db():
    with sqlite3.connect(Config.DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS workouts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                exercise_type TEXT,
                date TEXT,
                value INTEGER,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        conn.commit()


def add_user(user_id: int, username: str, first_name: str, last_name: str):
    with sqlite3.connect(Config.DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute(
            "INSERT OR IGNORE INTO users (user_id, username, first_name, last_name) VALUES (?, ?, ?, ?)",
            (user_id, username, first_name, last_name),
        )
        conn.commit()


def add_workout(user_id: int, exercise_type: str, value: int):
    today = datetime.now().strftime("%Y-%m-%d")
    with sqlite3.connect(Config.DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO workouts (user_id, exercise_type, date, value) VALUES (?, ?, ?, ?)",
            (user_id, exercise_type, today, value),
        )
        conn.commit()


def get_today_workouts(user_id: int, exercise_type: str) -> int:
    today = datetime.now().strftime("%Y-%m-%d")
    with sqlite3.connect(Config.DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute(
            "SELECT SUM(value) FROM workouts WHERE user_id = ? AND exercise_type = ? AND date = ?",
            (user_id, exercise_type, today),
        )
        result = cursor.fetchone()[0] or 0
    return result


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    add_user(user.id, user.username, user.first_name, user.last_name)
    exercises_list = "\n".join([f"- {ex} (—Ü–µ–ª—å: {Config.GOALS[ex]})" for ex in Config.GOALS])
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
        f"–Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –î–æ—Å—Ç—É–ø–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n"
        f"{exercises_list}\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π /add <—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ> <–∑–Ω–∞—á–µ–Ω–∏–µ>",
        parse_mode="Markdown"
    )


async def add_workout_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–æ–≤–æ–µ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ)
    is_edit = update.edited_message is not None
    message = update.edited_message if is_edit else update.message
    if not message:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return

    user = update.effective_user
    add_user(user.id, user.username, user.first_name, user.last_name)

    if len(context.args) < 2:
        await context.bot.send_message(
            chat_id=message.chat.id,
            text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add <—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ> <–∑–Ω–∞—á–µ–Ω–∏–µ>\n–ü—Ä–∏–º–µ—Ä—ã:\n/add pushups 25\n/add plank 1:30",
            reply_to_message_id=message.message_id
        )
        return

    exercise_type = context.args[0].lower()
    value_str = context.args[1]

    try:
        if exercise_type == 'pushups':
            value = int(value_str)
        elif exercise_type == 'plank':
            if ':' in value_str:
                minutes, seconds = map(int, value_str.split(':'))
                value = minutes * 60 + seconds
            else:
                value = int(value_str)
        else:
            await context.bot.send_message(
                chat_id=message.chat.id,
                text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ",
                reply_to_message_id=message.message_id
            )
            return
    except ValueError:
        await context.bot.send_message(
            chat_id=message.chat.id,
            text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
            reply_to_message_id=message.message_id
        )
        return

    # –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–ø–∏—Å—å
    if is_edit:
        with sqlite3.connect(Config.DB_NAME) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                           DELETE
                           FROM workouts
                           WHERE user_id = ?
                             AND exercise_type = ?
                             AND date = ?
                             AND id = (
                               SELECT id FROM workouts
                               WHERE user_id = ?
                             AND exercise_type = ?
                             AND date = ?
                               ORDER BY id DESC LIMIT 1
                               )
                           """, (user.id, exercise_type, datetime.now().strftime("%Y-%m-%d"),
                                 user.id, exercise_type, datetime.now().strftime("%Y-%m-%d")))
            conn.commit()

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å (–∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é)
    add_workout(user.id, exercise_type, value)
    today_total = get_today_workouts(user.id, exercise_type)
    goal = Config.GOALS[exercise_type]

    if exercise_type == 'pushups':
        message_text = format_pushups_response(user.username, value, today_total, goal)
    else:
        message_text = format_plank_response(user.username, value, today_total, goal)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if is_edit:
        message_text = "‚úèÔ∏è " + message_text

    await context.bot.send_message(
        chat_id=message.chat.id,
        text=message_text,
        parse_mode="Markdown",
        reply_to_message_id=message.message_id
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if not is_edit and str(message.chat.id) == str(Config.GROUP_CHAT_ID):
        await context.bot.send_message(
            chat_id=Config.GROUP_CHAT_ID,
            text=f"@{user.username} –¥–æ–±–∞–≤–∏–ª {value_str} –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é {exercise_type}!",
            parse_mode="Markdown"
        )


def format_pushups_response(username: str, value: int, total: int, goal: int) -> str:
    if total >= goal:
        return (
            f"üèÜ @{username}, —Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª –Ω–æ—Ä–º—É –æ—Ç–∂–∏–º–∞–Ω–∏–π!\n"
            f"–í—Å–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è: {total} –∏–∑ {goal}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ: {value}"
        )
    return (
        f"üí™ @{username}, —Ö–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞!\n"
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {value} –æ—Ç–∂–∏–º–∞–Ω–∏–π\n"
        f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {total}/{goal}\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å: {goal - total}"
    )


def format_plank_response(username: str, value: int, total: int, goal: int) -> str:
    def sec_to_str(seconds):
        mins = seconds // 60
        secs = seconds % 60
        return f"{mins}:{secs:02d}"

    if total >= goal:
        return (
            f"üèÜ @{username}, —Ç—ã –≤—ã–ø–æ–ª–Ω–∏–ª –Ω–æ—Ä–º—É –ø–ª–∞–Ω–∫–∏!\n"
            f"–û–±—â–µ–µ –≤—Ä–µ–º—è —Å–µ–≥–æ–¥–Ω—è: {sec_to_str(total)}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–¥—Ö–æ–¥: {sec_to_str(value)}"
        )
    return (
        f"üí™ @{username}, —Ö–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞!\n"
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {sec_to_str(value)} –ø–ª–∞–Ω–∫–∏\n"
        f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {sec_to_str(total)}/{sec_to_str(goal)}\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å: {sec_to_str(goal - total)}"
    )


# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
async def remind_workouts(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now(TIMEZONE)
    today = now.strftime("%Y-%m-%d")
    if 9 <= now.hour < 21:  # –¢–æ–ª—å–∫–æ —Å 9:00 –¥–æ 21:00
        try:
            with sqlite3.connect(Config.DB_NAME) as conn:
                cursor = conn.cursor()

                # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—Å—Ç–∞—é—â–∏—Ö
                reminders = []

                for exercise, goal in Config.GOALS.items():
                    cursor.execute("""
                                   SELECT u.user_id,
                                          u.username,
                                          COALESCE(SUM(w.value), 0) AS total
                                   FROM users u
                                            LEFT JOIN workouts w ON
                                       w.user_id = u.user_id AND
                                       w.exercise_type = ? AND
                                       w.date = ?
                                   GROUP BY u.user_id
                                   HAVING total < ?
                                   ORDER BY total DESC
                                   """, (exercise, today, goal))

                    underachievers = []
                    for row in cursor.fetchall():
                        user_id, username, total = row
                        if exercise == 'plank':
                            total_str = f"{total // 60}:{total % 60:02d}"
                            goal_str = f"{goal // 60}:{goal % 60:02d}"
                        else:
                            total_str = str(total)
                            goal_str = str(goal)

                        underachievers.append(f"@{username} - {total_str}/{goal_str}")

                    if underachievers:
                        reminders.append(
                            f"*{exercise.capitalize()}:*\n" +
                            "\n".join(underachievers)
                        )

                if reminders:
                    message = "‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*\n" + \
                              "\n\n".join(reminders)

                    await context.bot.send_message(
                        chat_id=Config.GROUP_CHAT_ID,
                        text=message,
                        parse_mode="Markdown"
                    )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ remind_workouts: {e}")


# --- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç ---
async def generate_report() -> str:
    today = datetime.now().strftime("%Y-%m-%d")
    with sqlite3.connect(Config.DB_NAME) as conn:
        cursor = conn.cursor()

        report_sections = []

        for exercise, goal in Config.GOALS.items():
            cursor.execute("""
                           SELECT u.user_id,
                                  u.first_name,
                                  COALESCE(SUM(w.value), 0) as total
                           FROM users u
                           LEFT JOIN workouts w ON
                               u.user_id = w.user_id AND
                               w.exercise_type = ? AND
                               w.date = ?
                           GROUP BY u.user_id
                                  """, (exercise, today))
            results = cursor.fetchall()
            achievers = []
            underachievers = []

            for user_id, first_name, total in results:
                if exercise == 'plank':
                    total_str = f"{total // 60}:{total % 60:02d}"
                    goal_str = f"{goal // 60}:{goal % 60:02d}"
                else:
                    total_str = str(total)
                    goal_str = str(goal)

                if total >= goal:
                    achievers.append(f"{first_name} - {total_str} ‚úÖ")
                else:
                    underachievers.append(f"{first_name} - {total_str} ‚ùå (–æ—Å—Ç–∞–ª–æ—Å—å {goal_str})")

            section = f"*{exercise.capitalize()} ({goal_str}):*\n"
            if achievers:
                section += "–ú–æ–ª–æ–¥—Ü—ã:\n" + "\n".join(achievers) + "\n"
            if underachievers:
                section += "–ù—É–∂–Ω–æ —Å—Ç–∞—Ä–∞—Ç—å—Å—è:\n" + "\n".join(underachievers)

            report_sections.append(section)

    report_message = "üìä *–ò—Ç–æ–≥–∏ –¥–Ω—è:*\n\n" + "\n\n".join(report_sections)
    return report_message


async def report_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /report"""
    user = update.effective_user
    add_user(user.id, user.username, user.first_name, user.last_name)
    report = await generate_report()
    await update.message.reply_text(report, parse_mode="Markdown")


async def send_daily_report(context: ContextTypes.DEFAULT_TYPE):
    try:
        report = await generate_report()
        if Config.GROUP_CHAT_ID:
            try:
                await context.bot.send_message(
                    chat_id=Config.GROUP_CHAT_ID,
                    text=report.replace("–¢–µ–∫—É—â–∏–π", "–ò—Ç–æ–≥–æ–≤—ã–π"),
                    parse_mode="Markdown"
                )
            except Forbidden:
                logger.error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–æ–≤–æ–º—É —á–∞—Ç—É")
                if Config.ADMIN_USER_ID:
                    await context.bot.send_message(
                        chat_id=Config.GROUP_CHAT_ID,
                        text="‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–æ–≤–æ–º—É —á–∞—Ç—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞",
                        parse_mode="Markdown"
                    )
        elif Config.ADMIN_USER_ID:
            await context.bot.send_message(
                chat_id=Config.GROUP_CHAT_ID,
                text="‚ö†Ô∏è GROUP_CHAT_ID –Ω–µ —É–∫–∞–∑–∞–Ω\n\n" + report.replace("–¢–µ–∫—É—â–∏–π", "–ò—Ç–æ–≥–æ–≤—ã–π"),
                parse_mode="Markdown"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_daily_report: {e}")


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏"""
    logger.error(msg="–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", exc_info=context.error)

    if isinstance(context.error, Forbidden):
        logger.warning(f"–ë–æ—Ç—É –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    elif isinstance(context.error, Exception):
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {context.error}")


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def main():
    init_db()

    # –°–æ–∑–¥–∞–µ–º Application —Å JobQueue
    application = Application.builder().token(Config.TOKEN).job_queue(JobQueue()).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_error_handler(error_handler)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("report", report_command))
    application.add_handler(CommandHandler("add", add_workout_command))

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ (9:00-21:00)
    application.job_queue.run_repeating(
        callback=remind_workouts,
        interval=7200,
        first=10,
    )

    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 22:00
    application.job_queue.run_daily(
        callback=send_daily_report,
        time=time(hour=22, minute=0, tzinfo=TIMEZONE),
        days=tuple(range(7)),
    )

    application.run_polling()


if __name__ == "__main__":
    main()
