import os
import sqlite3
from datetime import datetime, time
import pytz
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    JobQueue,
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏–∑ .env
load_dotenv()


class Config:
    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    DB_NAME = os.getenv("DB_NAME", "pushups.db")
    ADMIN_USER_ID = os.getenv("ADMIN_USER_ID")
    GOAL = int(os.getenv("GOAL", 100))  # –¶–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100
    GROUP_CHAT_ID = os.getenv("GROUP_CHAT_ID")  # –î–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞


if not Config.TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TIMEZONE = pytz.timezone('Europe/Moscow')  # –ñ–µ—Å—Ç–∫–æ –∑–∞–¥–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è


# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
def init_db():
    with sqlite3.connect(Config.DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS pushups (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                date TEXT,
                count INTEGER,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        conn.commit()


def add_user(user_id: int, username: str, first_name: str, last_name: str):
    with sqlite3.connect(Config.DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute(
            "INSERT OR IGNORE INTO users (user_id, username, first_name, last_name) VALUES (?, ?, ?, ?)",
            (user_id, username, first_name, last_name),
        )
        conn.commit()


def add_pushups(user_id: int, count: int):
    today = datetime.now().strftime("%Y-%m-%d")
    with sqlite3.connect(Config.DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO pushups (user_id, date, count) VALUES (?, ?, ?)",
            (user_id, today, count),
        )
        conn.commit()


def get_today_pushups(user_id: int) -> int:
    today = datetime.now().strftime("%Y-%m-%d")
    with sqlite3.connect(Config.DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute(
            "SELECT SUM(count) FROM pushups WHERE user_id = ? AND date = ?",
            (user_id, today),
        )
        result = cursor.fetchone()[0] or 0
    return result


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    add_user(user.id, user.username, user.first_name, user.last_name)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
        f"–Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ –æ—Ç–∂–∏–º–∞–Ω–∏–π. –¶–µ–ª—å ‚Äî {Config.GOAL} –≤ –¥–µ–Ω—å.\n"
        f"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´25¬ª –∏–ª–∏ ¬´—Å–¥–µ–ª–∞–ª 30¬ª.\n\n"
        f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: `{update.message.chat.id}`",
        parse_mode="Markdown"
    )


async def handle_pushups(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id

    try:
        count = int("".join(filter(str.isdigit, text)))
    except ValueError:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´25¬ª")
        return

    today_pushups = get_today_pushups(user_id)
    total = today_pushups + count

    add_pushups(user_id, count)

    if total >= Config.GOAL:
        await update.message.reply_text(
            f"üî• –û—Ç–ª–∏—á–Ω–æ! –¢—ã –¥–æ—Å—Ç–∏–≥ {Config.GOAL} –æ—Ç–∂–∏–º–∞–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è!\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ {count} ‚Äî –∏ —Ç—ã –º–æ–ª–æ–¥–µ—Ü!"
        )
    else:
        await update.message.reply_text(
            f"‚úÖ –î–æ–±–∞–≤–∏–ª {count} –æ—Ç–∂–∏–º–∞–Ω–∏–π. –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {total}/{Config.GOAL}.\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å {Config.GOAL - total}!"
        )


# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
async def remind_pushups(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now(TIMEZONE)
    if 9 <= now.hour < 21:  # –¢–æ–ª—å–∫–æ —Å 9:00 –¥–æ 21:00
        with sqlite3.connect(Config.DB_NAME) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT user_id FROM users")
            users = cursor.fetchall()

            for (user_id,) in users:
                today_pushups = get_today_pushups(user_id)
                if today_pushups < Config.GOAL:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –°–µ–≥–æ–¥–Ω—è —Ç—ã —Å–¥–µ–ª–∞–ª {today_pushups}/{Config.GOAL}. –î–∞–≤–∞–π, –µ—â—ë –Ω–µ–º–Ω–æ–≥–æ!",
                    )


# --- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç ---
async def send_daily_report(context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now().strftime("%Y-%m-%d")
    with sqlite3.connect(Config.DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("""
                       SELECT u.user_id, u.first_name, COALESCE(SUM(p.count), 0) as total
                       FROM users u
                                LEFT JOIN pushups p ON u.user_id = p.user_id AND p.date = ?
                       GROUP BY u.user_id, u.first_name
                       """, (today,))
        results = cursor.fetchall()

    achievers = []
    underachievers = []

    for user_id, first_name, total in results:
        if total >= Config.GOAL:
            achievers.append(f"{first_name} - {total} ‚úÖ")
        else:
            underachievers.append(f"{first_name} - {total} ‚ùå (–æ—Å—Ç–∞–ª–æ—Å—å {Config.GOAL - total})")

    report_message = "üìä *–ò—Ç–æ–≥–∏ –¥–Ω—è:*\n\n"

    if achievers:
        report_message += "*–ú–æ–ª–æ–¥—Ü—ã!*\n" + "\n".join(achievers) + "\n\n"

    if underachievers:
        report_message += "*–ù—É–∂–Ω–æ —Å—Ç–∞—Ä–∞—Ç—å—Å—è –±–æ–ª—å—à–µ:*\n" + "\n".join(underachievers)

    if Config.GROUP_CHAT_ID:
        await context.bot.send_message(
            chat_id=int(Config.GROUP_CHAT_ID),
            text=report_message,
            parse_mode="Markdown"
        )
    elif Config.ADMIN_USER_ID:
        await context.bot.send_message(
            chat_id=int(Config.ADMIN_USER_ID),
            text="‚ö†Ô∏è GROUP_CHAT_ID –Ω–µ —É–∫–∞–∑–∞–Ω, –æ—Ç—á–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É\n\n" + report_message,
            parse_mode="Markdown"
        )


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def main():
    init_db()

    # –°–æ–∑–¥–∞–µ–º Application —Å JobQueue
    application = Application.builder().token(Config.TOKEN).job_queue(JobQueue()).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_pushups))

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ (9:00-21:00)
    application.job_queue.run_repeating(
        callback=remind_pushups,
        interval=7200,
        first=10,
    )

    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 22:00
    application.job_queue.run_daily(
        callback=send_daily_report,
        time=time(hour=22, minute=0),
        days=tuple(range(7)),  # –í—Å–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    )

    application.run_polling()


if __name__ == "__main__":
    main()